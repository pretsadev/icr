#!/bin/bash

######################
# VARIABLES          #
######################

COMMAND=()
CONTAINER_ENGINE=
ENGINE_OPTIONS=()
COMMON_ENGINE_OPTIONS=()
PODMAN_ENGINE_OPTIONS=()
DOCKER_ENGINE_OPTIONS=()
BINARY=
ARGUMENTS=()
VOLUMES=()
ENV_VARIABLES=()

######################
# CHECKS             #
######################

if [ "${PWD}" == "${HOME}" ] || [ "${PWD}" == "/" ] ; then
  echo "icr not allowed to run on this directory"
  exit 1
fi

######################
# CONTAINER ENGINE   #
######################

if [ "$(command -v podman)" ]; then
  CONTAINER_ENGINE=podman
elif [ "$(command -v docker)" ]; then
  CONTAINER_ENGINE=docker
else
  echo "No supported container engine found"
  exit 1
fi

######################
# BINARY             #
######################
BINARY="$(basename "$0")"
if [ "${BINARY}" == "icr" ]; then
  if [ $# -lt 1 ]; then
    echo 'ERROR: At least one argument expected'
    exit 1
  fi
  BINARY="$1"
  shift
fi

######################
# ARGUMENTS          #
######################
ARGUMENTS+=("$@")

######################
# MAIN ICR FUNCTION  #
######################
function in-container-run() {
  ######################
  # CONTAINER ENGINE   #
  ######################
  if [ "$(command -v podman)" ]; then
    CONTAINER_ENGINE=podman
    ENGINE_OPTIONS+=("${PODMAN_ENGINE_OPTIONS[@]}")
  elif [ "$(command -v docker)" ]; then
    CONTAINER_ENGINE=docker
    ENGINE_OPTIONS+=("${DOCKER_ENGINE_OPTIONS[@]}")
  else
    echo "No supported container engine found"
    exit 1
  fi
  ENGINE_OPTIONS+=("${COMMON_ENGINE_OPTIONS[@]}")

  ######################
  # COMMAND            #
  ######################
  COMMAND+=("${CONTAINER_ENGINE}")
  COMMAND+=("run")
  COMMAND+=("--name")
  COMMAND+=("icr")
  COMMAND+=("--rm")
  COMMAND+=("-it")
  COMMAND+=("${ENGINE_OPTIONS[@]}")

  # volumes
  for entry in "${VOLUMES[@]}"
    do
      COMMAND+=("-v")
      COMMAND+=("${entry}")
    done

  # environment variables
  for entry in "${ENV_VARIABLES[@]}"
    do
      COMMAND+=("-e")
      COMMAND+=("${entry}")
    done

  COMMAND+=("${IMAGE}")
  COMMAND+=("${BINARY}")
  COMMAND+=("${ARGUMENTS[@]}")

  # in container run
  echo "=== [üêã ${CONTAINER_ENGINE}] running :: ${BINARY} ${ARGUMENTS[*]}"

  # Uncomment to debug composed command
  echo "${COMMAND[@]}"
  "${COMMAND[@]}"
  exit 0
}


######################
# SUPPORTED BINARIES #
######################

# ansible
if [ "${BINARY}" == "ansible" ] ||
   [ "${BINARY}" == "ansible-galaxy" ] ||
   [ "${BINARY}" == "ansible-playbook" ] ||
   [ "${BINARY}" == "ansible-runner" ] ||
   [ "${BINARY}" == "ansible-test" ] ||
   [ "${BINARY}" == "ansible-vault" ]; then

  IMAGE="ghcr.io/ansible-community/community-ee-minimal"

  if [ -d "${HOME}/.ssh" ]; then
      VOLUMES+=("${HOME}/.ssh:/runner/.ssh:z")
  fi

  mkdir -p "${HOME}/.ansible"
  VOLUMES+=("${HOME}/.ansible:/runner/.ansible:z")
  VOLUMES+=("${PWD}/:/workspace/:z")
  COMMON_ENGINE_OPTIONS+=("-w")
  COMMON_ENGINE_OPTIONS+=("/workspace")
  # podman
  PODMAN_ENGINE_OPTIONS+=('--userns=keep-id')
  PODMAN_ENGINE_OPTIONS+=('--passwd-entry="$USERNAME:*:$UID:$GID:$NAME:/runner:/bin/sh"')
  # docker
  DOCKER_ENGINE_OPTIONS+=("-u")
  DOCKER_ENGINE_OPTIONS+=("$(id -u)")
  in-container-run
fi

# antora
if [ "${BINARY}" == "antora" ]; then
  IMAGE="docker.io/antora/antora"
  VOLUMES+=("${PWD}/:/antora/:z")
  # podman
  PODMAN_ENGINE_OPTIONS+=('--userns=keep-id')
  PODMAN_ENGINE_OPTIONS+=('--passwd-entry="$USERNAME:*:$UID:$GID:$NAME:/runner:/bin/sh"')
  # docker
  DOCKER_ENGINE_OPTIONS+=("-u")
  DOCKER_ENGINE_OPTIONS+=("$(id -u)")
  in-container-run
fi

# aws-cli
if [ "${BINARY}" == "aws" ]; then
  IMAGE="public.ecr.aws/aws-cli/aws-cli"
  VOLUMES+=("${HOME}/.aws/:/root/.aws/:z")
  VOLUMES+=("${PWD}/:/aws/:z")
  # podman
  PODMAN_ENGINE_OPTIONS+=('--userns=keep-id')
  PODMAN_ENGINE_OPTIONS+=('--passwd-entry="$USERNAME:*:$UID:$GID:$NAME:/runner:/bin/sh"')
  # docker
  DOCKER_ENGINE_OPTIONS+=("-u")
  DOCKER_ENGINE_OPTIONS+=("$(id -u)")
  in-container-run
fi

# not supported binary
echo "${BINARY} is not supported yet."

